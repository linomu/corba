package cliente.vistas;

import Paciente.Paciente;
import org.omg.CORBA.*;

import servidorDeAlertas.sop_corba.*;


import conexion.ConexionBD;
import java.awt.Image;
import java.lang.Object;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class CRUDPaciente extends javax.swing.JFrame {

    private final ConexionBD conexionABaseDeDatos;
    private static boolean hayPaciente;
    static PacienteCllbckInt href1;
    static GestionAlertasInt ref;
    //private ArrayList<String> mensajesTextArea = new ArrayList<>();
    //private ArrayList<Integer> numeroHabitaciones = new ArrayList<>();

    public CRUDPaciente() {
        initComponents();
        //llenarTabla();
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
        //funcionalidadCorba();
        inhabilidarTextFecha();
        fijarImagenesEnElFormulario();
        txtId.setVisible(false);
        conexionABaseDeDatos= new ConexionBD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtNumHabitacion = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        imagenEPS = new javax.swing.JLabel();
        logocorazon = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        btnBuscarCRUD = new javax.swing.JButton();
        btnGuardarCRUD = new javax.swing.JButton();
        btnModificarCRUD = new javax.swing.JButton();
        jdFecha = new com.toedter.calendar.JDateChooser();
        btnLimpiar = new javax.swing.JButton();
        txtEliminar = new javax.swing.JButton();
        btnGoLectura = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPacientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre:");

        jLabel2.setText("Apellidos:");

        jLabel3.setText("Fecha de nacimiento:");

        jLabel4.setText("Num. HabitaciÃ³n:");

        txtNombre.setName("txtNombre"); // NOI18N
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtNumHabitacion.setName("txtNumHabitacion"); // NOI18N

        txtApellido.setName("txtApellido"); // NOI18N

        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtId.setEnabled(false);

        btnBuscarCRUD.setText("Buscar");
        btnBuscarCRUD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCRUDActionPerformed(evt);
            }
        });

        btnGuardarCRUD.setText("Guardar");
        btnGuardarCRUD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCRUDActionPerformed(evt);
            }
        });

        btnModificarCRUD.setText("Modificar");
        btnModificarCRUD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarCRUDActionPerformed(evt);
            }
        });

        jdFecha.setDateFormatString("yyyy-MM-dd");

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        txtEliminar.setText("Eliminar");
        txtEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEliminarActionPerformed(evt);
            }
        });

        btnGoLectura.setText("Tomar lectura de los sensores");
        btnGoLectura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoLecturaActionPerformed(evt);
            }
        });

        tblPacientes.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        tblPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num Habitacion", "Nombres", "Apellidos", "Fecha de nacimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPacientes);
        if (tblPacientes.getColumnModel().getColumnCount() > 0) {
            tblPacientes.getColumnModel().getColumn(0).setResizable(false);
            tblPacientes.getColumnModel().getColumn(1).setResizable(false);
            tblPacientes.getColumnModel().getColumn(2).setResizable(false);
            tblPacientes.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagenEPS, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(logocorazon, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGuardarCRUD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnModificarCRUD)
                                .addGap(7, 7, 7)
                                .addComponent(txtEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiar))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(71, 71, 71)
                                    .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(84, 84, 84)
                                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtNumHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBuscarCRUD))
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGoLectura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalir))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagenEPS, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(logocorazon, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtNumHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnBuscarCRUD)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel2))
                            .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardarCRUD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificarCRUD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGoLectura, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    public String mensajeIndicadores(PacienteDTO objNewCliente) {
        DecimalFormat df = new DecimalFormat("#.00");
        String mensaje = "Enviando Indicadores...\n"
                + "Frecuencia Cardiaca: " + df.format(objNewCliente.frecuenciaCardiaca)
                + "\nPresiÃ³n Arterial: " + df.format(objNewCliente.sistolica) + "/" + df.format(objNewCliente.diastolica)
                + "\nFrecuencia Respiratoria: " + df.format(objNewCliente.frecuenciaRespiratoria)
                + "\nTemperatura: " + df.format(objNewCliente.temperatura)
                + "\nSaturaciÃ³n de OxÃ­gento: " + df.format(objNewCliente.saturacionOxigeno) + "\n"
                + "************\n";
        return mensaje;
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarCRUDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCRUDActionPerformed
        
        conexionABaseDeDatos.conectar();
        int resultado=-1;
        if (validarFormulario()) {
            try {
                PreparedStatement sentencia = null;
                String consulta = "insert into paciente(numHabitacion, nombresPaciente, apellidosPaciente, fechaNac) values(?,?,?,?)";
                sentencia = conexionABaseDeDatos.getConnection().prepareStatement(consulta);
                sentencia.setString(1, txtNumHabitacion.getText());
                sentencia.setString(2, txtNombre.getText());
                sentencia.setString(3, txtApellido.getText());
                sentencia.setString(4, ((JTextField)jdFecha.getDateEditor().getUiComponent()).getText());
                resultado = sentencia.executeUpdate(); 
                sentencia.close();
                conexionABaseDeDatos.desconectar();
            } catch (SQLException e) {
                      System.out.println("error en la inserciÃ³n: "+e.getMessage());         
            }
            if (resultado>=1) {
                JOptionPane.showMessageDialog(null, "Paciente registrado satisfactoriamente.");
                limpiarCajas();
            }else{
                JOptionPane.showMessageDialog(null, "Fallo al registrar paciente.");
                limpiarCajas();
            }
        }
       
    }//GEN-LAST:event_btnGuardarCRUDActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCajas();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarCRUDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCRUDActionPerformed
        conexionABaseDeDatos.conectar();  
        if (txtNumHabitacion.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Llene el campo Num HabitaciÃ³n para realizar la busqueda.");
        }else if (validarNumHabitacion(Integer.parseInt(txtNumHabitacion.getText()))){
            try {            
               PreparedStatement sentencia = null;
               String consulta = "select * from paciente where numHabitacion=?";
               sentencia = conexionABaseDeDatos.getConnection().prepareStatement(consulta);            
               sentencia.setString(1, txtNumHabitacion.getText());
               ResultSet res = sentencia.executeQuery();
               if(res.next()){
                   txtId.setText(res.getString("idPaciente"));
                   txtNumHabitacion.setText(res.getString("numHabitacion"));
                   txtNombre.setText(res.getString("nombresPaciente"));
                   txtApellido.setText(res.getString("apellidosPaciente"));
                   ((JTextField)jdFecha.getDateEditor().getUiComponent()).setText(res.getString("fechaNac"));
                   hayPaciente = true;
               }else{
                   JOptionPane.showMessageDialog(null, "No se encuenta el paciente.");
                   hayPaciente = false;
                   limpiarCajas();
               }
               sentencia.close();
               conexionABaseDeDatos.desconectar();
            }catch (SQLException e) {
                System.out.println("error en la consulta de un paciente: "+e.getMessage());         
            }   
        }else{
            JOptionPane.showMessageDialog(null, "Error al buscar paciente. El num de habitacion debe estar entre 100 y 999.");
        }
    }//GEN-LAST:event_btnBuscarCRUDActionPerformed

    private void btnModificarCRUDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarCRUDActionPerformed
        conexionABaseDeDatos.conectar();
        int resultado=-1;
        if (validarFormulario()) {
            try {
                PreparedStatement sentencia = null;
                String consulta = "update paciente set numHabitacion=?, nombresPaciente=?, apellidosPaciente=?, fechaNac=? where idPaciente=?";
                sentencia = conexionABaseDeDatos.getConnection().prepareStatement(consulta);
                sentencia.setString(1, txtNumHabitacion.getText());
                sentencia.setString(2, txtNombre.getText());
                sentencia.setString(3, txtApellido.getText());
                sentencia.setString(4, ((JTextField)jdFecha.getDateEditor().getUiComponent()).getText());
                sentencia.setString(5, txtId.getText());
                resultado = sentencia.executeUpdate(); 
                sentencia.close();
                conexionABaseDeDatos.desconectar();
            } catch (SQLException e) {
                      System.out.println("error en la inserciÃ³n: "+e.getMessage());         
            }
            if (resultado>=1) {
                JOptionPane.showMessageDialog(null, "Paciente modificado satisfactoriamente.");
                limpiarCajas();
            }else{
                JOptionPane.showMessageDialog(null, "Fallo al modificar paciente.");
                limpiarCajas();
            }
        }
    }//GEN-LAST:event_btnModificarCRUDActionPerformed

    private void txtEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEliminarActionPerformed
        conexionABaseDeDatos.conectar();
        int resultado=-1;
        if(txtNumHabitacion.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Llene el campo Num HabitaciÃ³n para eliminar paciente.");
        }else if(validarNumHabitacion(Integer.parseInt(txtNumHabitacion.getText()))){
            try {            
                PreparedStatement sentencia = null;
                String consulta = "delete from paciente where idPaciente=?";
                sentencia = conexionABaseDeDatos.getConnection().prepareStatement(consulta);            
                sentencia.setString(1, txtId.getText());
                resultado = sentencia.executeUpdate(); 
                sentencia.close();
                conexionABaseDeDatos.desconectar();

            } catch (SQLException e) {
                      System.out.println("error en la eliminaciÃ³n: "+e.getMessage());         
            }
            if (resultado==1) {
                JOptionPane.showMessageDialog(null, "Paciente eliminado satisfactoriamente.");
                limpiarCajas();
            }else{
                JOptionPane.showMessageDialog(null, "Fallo al eliminar paciente.");
                limpiarCajas();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Error al eliminar paciente. El numero de habitacion debe estar entre 100 y 999.");
        }
    }//GEN-LAST:event_txtEliminarActionPerformed

    private void btnGoLecturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoLecturaActionPerformed
        if(hayPaciente){
            Paciente paciente = capturarPaciente();
            ClienteDeObjetos lectura = new ClienteDeObjetos(paciente);
            this.setVisible(false);
            lectura.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "No has seleccionado/buscado un paciente. Por favor busca un paciente para seleccionarlo.");
        }
    }//GEN-LAST:event_btnGoLecturaActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CRUDPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CRUDPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CRUDPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CRUDPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CRUDPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarCRUD;
    private javax.swing.JButton btnGoLectura;
    private javax.swing.JButton btnGuardarCRUD;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificarCRUD;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel imagenEPS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdFecha;
    private javax.swing.JLabel logocorazon;
    private javax.swing.JTable tblPacientes;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JButton txtEliminar;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumHabitacion;
    // End of variables declaration//GEN-END:variables

    private void inhabilitarComponentes() {
        this.txtNumHabitacion.setEnabled(false);
        this.txtNombre.setEnabled(false);
        this.txtApellido.setEnabled(false);
        this.jdFecha.setEnabled(false);
    }

    private void fijarImagenesEnElFormulario() {
        Image img = new ImageIcon(this.getClass().getResource("img/logo.png")).getImage();
        this.imagenEPS.setIcon(new ImageIcon(img));
        Image img2 = new ImageIcon(this.getClass().getResource("img/corazon.png")).getImage();
        this.logocorazon.setIcon(new ImageIcon(img2));
    }

    private boolean validarFormulario() {
        boolean formularioCorrecto=true;
        if((((JTextField)this.jdFecha.getDateEditor().getUiComponent()).getText().isEmpty() || this.txtNombre.getText().equals("") || this.txtApellido.getText().equals(""))){
            formularioCorrecto  = false;
            JOptionPane.showMessageDialog(this, "El formulario se encuentra incompleto.");
        }
        else if (!validarAnio(((JTextField)this.jdFecha.getDateEditor().getUiComponent()).getText())) {
            formularioCorrecto  = false;
            JOptionPane.showMessageDialog(this, "El anio ingresado no puede ser igual o mayor al anio actual");
        }
        else if (!validarNumHabitacion(Integer.parseInt(txtNumHabitacion.getText()))) {
            formularioCorrecto  = false;
            JOptionPane.showMessageDialog(this, "El num de habitacion debe estar entre 100 y 999.");
        }
        else{
            try {
                int numHabitacion = Integer.parseInt(txtNumHabitacion.getText());
            } catch (NumberFormatException e) { 
                JOptionPane.showMessageDialog(this, "La habitaciÃ³n debe ser un nÃºmero entre 100 y 999");
                formularioCorrecto = false;
            }
        }
        return formularioCorrecto;
    }
    
    public boolean validarAnio(String fecha){
        String[] fechaIngresada = fecha.split("-");
        int anio = Integer.parseInt(fechaIngresada[0]);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
        LocalDateTime now = LocalDateTime.now();  
        String[] fechaActual = dtf.format(now).toString().split("-");
        int anioActual = Integer.parseInt(fechaActual[0]);
        
        return anioActual>anio;
    }
    
    public boolean validarNumHabitacion(int num){
        boolean valido = false;
        if (num >= 100 && num <= 999) {
            valido = true;
        }
        return valido;
    }
    
    public void inhabilidarTextFecha(){
        jdFecha.setEnabled(false);
        jdFecha.getCalendarButton().setEnabled(true);
    }
    
    public void limpiarCajas(){
        txtNumHabitacion.setText(null);
        txtNombre.setText(null);
        txtApellido.setText(null);
        ((JTextField)jdFecha.getDateEditor().getUiComponent()).setText(null);
    }
    
    public ArrayList<Paciente> listaPacientes(){
        ArrayList<Paciente> pacientes = new ArrayList<>();
        
        conexionABaseDeDatos.conectar();        
        try {            
            PreparedStatement sentencia = null;
            String consulta = "select * from paciente";
            sentencia = conexionABaseDeDatos.getConnection().prepareStatement(consulta);            
            ResultSet res = sentencia.executeQuery();
            DefaultTableModel tm  = (DefaultTableModel)tblPacientes.getModel();
            Paciente objPaciente;
            //tm.setRowCount(0);
            while(res.next()){
                objPaciente = new Paciente(res.getInt("numHabitacion"), res.getString("nombresPaciente"), res.getString("apellidosPaciente"), res.getString("fechaNac"));
                pacientes.add(objPaciente);
                
                
            }
            sentencia.close();
            conexionABaseDeDatos.desconectar();

        } catch (SQLException e) {
                  System.out.println("error en la inserciÃ³n: "+e.getMessage());         
        }
        
        return pacientes;
    }
    
    public void llenarTabla(){
        ArrayList<Paciente> pacientes = listaPacientes();
        DefaultTableModel model = (DefaultTableModel)tblPacientes.getModel();
        java.lang.Object[] row = new java.lang.Object[4];
        for (int i = 0; i < pacientes.size(); i++) {
            row[0] = pacientes.get(i).getNumHabitacion();
            row[1] = pacientes.get(i).getNombres();
            row[2] = pacientes.get(i).getApellidos();
            row[3] = pacientes.get(i).getFechaNac();
            model.addRow(row);
        }
    }
    
    public Paciente capturarPaciente(){
        int numHabitacion = Integer.parseInt(txtNumHabitacion.getText());
        String nombres = txtNombre.getText();
        String apellidos = txtApellido.getText();
        String fechaNac = ((JTextField)jdFecha.getDateEditor().getUiComponent()).getText();
        
        Paciente paciente = new Paciente(numHabitacion, nombres, apellidos, fechaNac);
        
        return paciente;
    }
}
